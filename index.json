[{"categories":["Personal"],"content":"Backend Enginneer Passionate Back-end Developer with 2+ years of experience in creating fast, secure, and user-friendly web systems. I use cutting-edge frameworks and technologies such as Echo, Express, Django, REST APIs, SQL, Mongo, Redis, Spark, and Google Cloud to build innovative solutions. Check out my Resume ","date":"14 Mar, 2023","objectID":"/posts/first_post/:1:0","tags":["Personal","Introduction"],"title":"Introducing Myself","uri":"/posts/first_post/"},{"categories":["Personal"],"content":"Competitive Coder I am a competitive programmer and have been participating in various coding competitions since 2020. Check out my CP profile on these sites Leetcode Codeforces Codechef Hackerrank Hackerearth ","date":"14 Mar, 2023","objectID":"/posts/first_post/:2:0","tags":["Personal","Introduction"],"title":"Introducing Myself","uri":"/posts/first_post/"},{"categories":["Personal"],"content":"Reader I like reading books. Some of my favorite books are The Alchemist - Paulo Cohelo Atomic habits - James Clear Think and Grow Rich - Napolean Hill The Story of My Experiments with Truth - M.K.Gandhi Clean Code - Robert C. Martin ","date":"14 Mar, 2023","objectID":"/posts/first_post/:3:0","tags":["Personal","Introduction"],"title":"Introducing Myself","uri":"/posts/first_post/"},{"categories":["Personal"],"content":"Casual Gamer I like playing games. Some of my favorite games are Legend of Zelda: Breath of the Wild Star Wars Jedi: Fallen Order God of War ","date":"14 Mar, 2023","objectID":"/posts/first_post/:4:0","tags":["Personal","Introduction"],"title":"Introducing Myself","uri":"/posts/first_post/"},{"categories":["Personal"],"content":"Books Recommendation Some of my favorite books, which I have read and would recommend to everyone. ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:0:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Personal Development Atomic habits - James Clear The 7 Habits of Highly Effective People - Stephen R. Covey ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:1:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Productivity Getting Things Done - David Allen ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:2:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Pshychology Thinking, Fast and Slow - Daniel Kahneman The Black Swan - Nassim Nicholas Taleb ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:3:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Autobiography The Story of My Experiments with Truth - M.K.Gandhi ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:4:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Story/Novel The Alchemist - Paulo Cohelo ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:5:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Science and Fiction A Brief History of Time - Stephen Hawking ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:6:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Classic Catcher in the Rye - J.D. Salinger To Kill a Mockingbird - Harper Lee ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:7:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Coding Clean Code - Robert C. Martin Clean Architecture - Robert C. Martin ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:8:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Design Pattern (Programming) Head First Design Patterns - Eric Freeman ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:9:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Personal"],"content":"Also Check out The Subtle Art of Not Giving a F*ck - Mark Manson The Power of Habit - Charles Duhigg ","date":"08 Apr, 2023","objectID":"/posts/books-recommendation/:10:0","tags":["Personal","Books","Recommendation"],"title":"Books Recommendation","uri":"/posts/books-recommendation/"},{"categories":["Design Patterns"],"content":"Observer Design Pattern Recently I had the opportunity to work on a project where I had to implement the Observer Design Pattern. Here is a simple explanation of the Observer Design Pattern with implementation in Go. ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:0:0","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Why learn Observer Design Pattern? Principles of Good Software Design\rIdentify the aspects of your application that vary and separate them from what stays the same. Program to an Interface, not an Implementation. Favor Composition over Inheritance. Strive for loosely coupled designs between objects that interact. Classes should be open for extension, but closed for modification. How does Observer Pattern follow those principles\rLoosely coupled design - Subject and Observers are loosely coupled. Subject does not know anything about the Observers and Observers do not know anything about the Subject. They are loosely coupled. The only thing the subject knows about an observer is that it implements a certain interface (the Observer interface). Add new Observers any time. Changes to either the subject or an observer will not affect the other. Ability to evolve Subject and Observers independently. ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:1:0","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Introduction What's a Observer Pattern\rObserver Design Pattern is a behavioral design pattern. It defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically. There are two types of objects in this pattern, the subject and the observers. The subject is the object whose state changes and the observers are the objects that are dependent on the subject. Consider a Public Github Repository, anyone can watch the repository and get notified whenever there is a commit in the repository. In this example, the repository is the subject and the watchers are the observers. The subject maintains a list of its observers and notifies them whenever there is a change in the subject. The observer interface has a single method, Update. The Update method is called by the subject whenever there is a change in the subject. The Update method is used to update the observer about the change in the subject. ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:2:0","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"UML Diagram ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:3:0","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Implementation Subject\rWe will create a Subject interface and an Observer interface. The Subject interface will have two methods, Attach and Notify. The Attach method will be used to attach an observer to the subject and the Notify method will be used to notify all the observers about the change in the subject. The subject will maintain a list of observers and will notify all the observers whenever there is a change in the subject. Optionally we can define a Data interface which will be used to pass data to the observers. Observer\rThe Observer interface will have a single method, Update. The Update method will be used to update the observer about the change in the subject. The observer will implement the Update method and will be notified whenever there is a change in the subject. ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:4:0","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Subject Interface type Subject interface { Attach(Observer) Notify() } type SubjectImpl struct { observers []Observer } func (s *SubjectImpl) Attach(o Observer) { s.observers = append(s.observers, o) } func (s *SubjectImpl) Notify(data Data) { for _, o := range s.observers { o.Update(data) } } ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:4:1","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Observer Interface type Observer interface { Update(Data) } type ObserverImpl struct { ID int } func (o *ObserverImpl) Update(data Data) { fmt.Println(\"Observer\", o.ID, \"received data\", data.name) } ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:4:2","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Data Struct type Data struct { name string } ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:4:3","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Let’s test our implementation func main() { subject := SubjectImpl{} observer1 := ObserverImpl{ID: 1} observer2 := ObserverImpl{ID: 2} observer3 := ObserverImpl{ID: 3} subject.Attach(\u0026observer1) subject.Attach(\u0026observer2) subject.Attach(\u0026observer3) subject.Notify(Data{name: \"Data 1\"}) subject.Notify(Data{name: \"Data 2\"}) } ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:4:4","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Output Observer 1 received data Data 1 Observer 2 received data Data 1 Observer 3 received data Data 1 Observer 1 received data Data 2 Observer 2 received data Data 2 Observer 3 received data Data 2 ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:4:5","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"GitHub Repository Observer Design Pattern in Go ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:5:0","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Conclusion Now you have one more awesome design pattern in your arsenal. Have fun implementing it in your projects. ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:6:0","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"},{"categories":["Design Patterns"],"content":"Credits Main Image Credit : Observer Pattern - Refactoring Guru ","date":"08 Apr, 2023","objectID":"/posts/observer-design-pattern/:7:0","tags":["Programming","Design Patterns"],"title":"Observer Design Pattern","uri":"/posts/observer-design-pattern/"}]